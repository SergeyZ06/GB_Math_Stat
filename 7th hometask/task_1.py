# Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
# zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110], ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Используя математические операции, посчитать коэффициенты линейной регрессии,
# приняв за X заработную плату (то есть, zp - признак),
# а за y - значения скорингового балла (то есть, ks - целевая переменная).
# Произвести расчет как с использованием intercept, так и без.

import math
import numpy as np


X = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110]
y = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]

n = len(X)


# Сперва выполним расчёт с Перехватом по обычным формулам.

sum_x_y = 0
sum_x = 0
sum_y = 0
sum_x2 = 0
for i in range(n):
    sum_x_y += X[i] * y[i]
    sum_x += X[i]
    sum_y += y[i]
    sum_x2 += math.pow(X[i], 2)
# sum_x_y = 811417
# sum_x = 1014
# sum_y = 7099
# sum_x2 = 137766.0

b = (n * sum_x_y - sum_x * sum_y) / (n * sum_x2 - math.pow(sum_x, 2))
# b = 2.6205388824027653

a = sum_y / n - b * sum_x / n
# a = 444.17735732435955

print(f'y = {a} + {b} * x')
# y = 444.17735732435955 + 2.6205388824027653 * x


# Теперь выполним расчёт без Перехвата при помощи матриц.

X = np.array(X).reshape(n, 1)
# [[ 35]
#  [ 45]
#  [190]
#  [200]
#  [ 40]
#  [ 70]
#  [ 54]
#  [150]
#  [120]
#  [110]]

y = np.array(y).reshape(n, 1)
# [[401]
#  [574]
#  [874]
#  [919]
#  [459]
#  [739]
#  [653]
#  [902]
#  [746]
#  [832]]

B_hat = np.dot(np.linalg.inv(np.dot(X.T, X)), X.T@y)
print(f'y = {B_hat[0][0]} * x')
# y = 5.889820420132688 * x


# Расчёт с Перехватом при помощи матриц.

X = np.array(X).reshape(n, 1)
X = np.hstack((np.ones((n, 1)), X))
# [[  1.  35.]
#  [  1.  45.]
#  [  1. 190.]
#  [  1. 200.]
#  [  1.  40.]
#  [  1.  70.]
#  [  1.  54.]
#  [  1. 150.]
#  [  1. 120.]
#  [  1. 110.]]

y = np.array(y).reshape(n, 1)
# [[401]
#  [574]
#  [874]
#  [919]
#  [459]
#  [739]
#  [653]
#  [902]
#  [746]
#  [832]]

B_hat = np.dot(np.linalg.inv(np.dot(X.T, X)), X.T@y)
print(f'y = {B_hat[0][0]} + {B_hat[1][0]} x')
# y = 444.1773573243595 + 2.620538882402766 x
